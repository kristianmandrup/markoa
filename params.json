{"name":"Markoa","tagline":"Markoa server","body":"Markoa\r\n======\r\n\r\nMarkoa is a Full stack framework (mostly backend), for rapid prototyping of applications using mock data that can easily be replaced with real services and other data sources... \r\n\r\nMarkoa is built on Koa.js, Marko.js and leverages Jade templating to boot.\r\n\r\n*Note: This project is currently available as `marooka` since `markoa` was already taken on `npm`*\r\n\r\nMounting apps\r\n-------------\r\n\r\nMount a basic Markoa app on a Koa.js server as follows:\r\n\r\n```js\r\nmodule.exports = require('marooka').AppMounter(__dirname).mountApps(['index', 'projects', 'login']).start();\r\n```\r\n\r\nNote: By default the Koa server will use port `4000` if no extra settings are provided.\r\n\r\n### App file structure\r\n\r\nFor any custom app structure, you may supply your own `findTemplate` and `pageData` functions in the app `config` Object when mounting your apps.\r\n\r\nThe project file structure should look as follows.\r\n\r\n```\r\n/apps\r\n  /_global\r\n    /components - custom taglibs and tags\r\n      /tags\r\n        /feed\r\n          /project-feed\r\n            marko-tag.json\r\n            renderer.js\r\n            template.jade\r\n            template.marko\r\n        marko-taglib.json\r\n      /widgets\r\n        marko-taglib.json\r\n      marko-taglib.json\r\n\r\n    /data - data available to all apps as $out.global\r\n      index.js\r\n      /available\r\n        index.js\r\n        categories.js        \r\n        ...\r\n      /feeds\r\n        index.js\r\n\r\n    /layouts - generic layouts\r\n      layout.jade\r\n      item-layout.jade\r\n      list-layout.jade\r\n\r\n  /index - app\r\n    meta.js  - app meta data\r\n    /components - app specific components\r\n      marko-taglib.json\r\n\r\n    /layouts - special page layouts\r\n      mobile.jade\r\n      base.jade\r\n\r\n    /page - page for app\r\n      app.jade\r\n      app.marko\r\n      /dependencies\r\n        broser.json\r\n        app.browser.json - lasso config file\r\n        widgets.json\r\n\r\n    /data - data for index app, available as $data\r\n      global.js - reuse global data from local app\r\n      index.js - local data for index app only\r\n\r\n    marko-taglib.json\r\n\r\n  /repositories - app\r\n    meta.js\r\n    ...\r\n  /teams - app\r\n  ...\r\nmarko-taglib.json  \r\n```\r\n\r\n### Generating apps\r\n\r\nThe generator [slush-markoa](https://github.com/kristianmandrup/slush-markoa) can be used to generate projects and other artifacts.\r\n\r\nGenerate a new app:\r\n\r\n`slush markoa:app`\r\n\r\nThis generator will create an app under `apps/[app-name]` similar to the default `index` app generated by the default marko generator. Use this generator each time you want to add an app!\r\n\r\n```sh\r\n/[app]\r\n  /components\r\n    /tags\r\n      /project-feed\r\n        template.jade\r\n        ...\r\n  /layouts\r\n    base.jade\r\n  /data\r\n    global.js\r\n    index.js\r\n  /page\r\n    meta.js\r\n    app.jade\r\n    app.marko\r\n    /dependencies\r\n      app.browser.json\r\n  marko-taglib.json\r\n```\r\n\r\n### Sub pages\r\n\r\n*Experimantal: WIP*\r\n\r\nSometimes an app contains sub pages. To support this, markoa can mount nested sub-routes for a given app. Each sub app will inherit from its parent app if it doesn't provide its own template, data, meta etc.\r\n\r\n```\r\n/apps\r\n  /users\r\n    meta.js\r\n    index.js\r\n\r\n    /apps\r\n      /details - nested app\r\n        /page\r\n          app.jade\r\n      /secret - nested app\r\n        meta.js\r\n        /data\r\n          index.js\r\n\r\n    /page\r\n      app.jade\r\n      app.marko\r\n\r\n      /dependencies\r\n        app.browser.json\r\n```\r\n\r\nIf an app contains a nested `/apps` folder Markoa will create sub apps that are mounted as sub routes. All The sub-pages can extend or override the parent app properties, to provide its own data, template etc. if needed.\r\n\r\n#### Working example\r\n\r\nCurrently a working example using this infrastructure can be seen for the project page of [Repo Manager](https://github.com/kristianmandrup/repo-manager-v3)\r\n\r\n### REST methods\r\n\r\nEach app should have an `index.js` as the entry point to expose the main parts of the app.\r\n\r\n```js\r\n/*jslint node: true */\r\n'use strict';\r\n\r\nmodule.exports = {\r\n  meta: require('./meta'),\r\n  data: require('./data'),\r\n  apps: require('./apps'),\r\n  methods: require('./methods'),\r\n};\r\n```\r\n\r\nDefine your REST-like methods:\r\n\r\n```js\r\n/*jslint node: true */\r\n'use strict';\r\nmethods: {\r\n  post: function*(next) {\r\n    console.log('POST');\r\n    yield next;\r\n  },\r\n  update: {\r\n    '.': function*(next) {\r\n      console.log('UPDATE');\r\n      yield next;\r\n    },\r\n    ':id': function*(next) {\r\n      console.log('UPDATE by id:', this.id);\r\n      yield next;\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nThe `methods` entry allows you to define REST endpoints for mutation actions such as:\r\n\r\n-\tPOST\r\n-\tPUT\r\n-\tDELETE\r\n\r\nYou can however use more intuitive action names such as: `create`, `update` and `remove` and they will be mapped to the appropriate [HTTP methods](http://www.restapitutorial.com/lessons/httpmethods.html).\r\n\r\nYou are responsible for taking it from there... (currently). We might add support for common REST patterns soon, such as `:id` for single item operations.\r\n\r\n### Custom routes\r\n\r\n*WIP: Coming soon*\r\n\r\nThe app `index.js` will soon be enhanced with a routes section like this:\r\n\r\n```js\r\n// index.js\r\nmodule.exports = {\r\n  meta: require('./meta'),\r\n  data: require('./data'),\r\n  routes: require('./routes')\r\n}\r\n```\r\n\r\nThe routes can be defined with paramssuch as `:id` which will automatically be available to the template directly in the data via. the `params` object, such as `data.params.id`.\r\n\r\nThis is achieved via Koa *Named route parameters* which are automatically captured and added to `ctx.params`\r\n\r\n```js\r\n// routes.js\r\nmodule.exports = {\r\n  '.': 'app',\r\n  ':id': 'item',\r\n  '/list/:id': function(name, config) {\r\n    // Note: Page data is available via config, which includes params etc.\r\n    // Can be used to decide which template to return!\r\n    return 'list';\r\n  }\r\n}\r\n```\r\n\r\n#### Named routes\r\n\r\n*WIP*\r\n\r\nWe will shortly add support for Koa named routes ;)\r\n\r\n\"Routes can optionally have names. This allows generation of URLs and easy renaming of URLs during development.\"\r\n\r\n```js\r\nrouter.get('user', '/users/:id', function *(next) {\r\n // ...\r\n});\r\n\r\nrouter.url('user', 3);\r\n// => \"/users/3\"\r\n```\r\n\r\nWe will also add built-in support for *Parameter middleware* as it is super powerful!\r\n\r\n```js\r\nrouter\r\n  .param('user', function *(id, next) {\r\n    this.user = users[id];\r\n    if (!this.user) return this.status = 404;\r\n    yield next;\r\n  })\r\n  .get('/users/:user', function *(next) {\r\n    this.body = this.user;\r\n  })\r\n  .get('/users/:user/friends', function *(next) {\r\n    this.body = yield this.user.getFriends();\r\n  })\r\n  // /users/3 => {\"id\": 3, \"name\": \"Alex\"}\r\n  // /users/3/friends => [{\"id\": 4, \"name\": \"TJ\"}]\r\n```\r\n\r\nRoutes are added via:\r\n\r\n```js\r\napp.use(router.routes());\r\napp.use(router.allowedMethods());\r\n```\r\n\r\n### App Meta data and inheritance\r\n\r\nAn app folder can contain a `meta.js` file to define meta data for the app.\r\n\r\n```js\r\nmodule.exports = {\r\n  type: 'item', // or: home, list, ...\r\n  form: true, // if it contains a form to edit the item\r\n  inherit: 'item', // app to inherit from for all\r\n  page: {\r\n    // type: 'item',\r\n    app: 'item' // app to use for page if no page found here\r\n  },\r\n  data: {\r\n    // type: 'item',\r\n    // app: 'item' app to use as data source if no data here\r\n  }\r\n}\r\n```\r\n\r\n#### Inheritance and reuse\r\n\r\nThe meta data can be used to indicate which apps to fall back to (inherit from) for the template and data used so as to reuse from other apps and thus minimize duplication.\r\n\r\n#### Stats\r\n\r\nThe meta data can also be used to gather stats about the app in aggregate, f.ex to list all the apps that display lists, have forms etc.\r\n\r\n### Using App inheritance\r\n\r\nLet's say we have global data:\r\n\r\n```js\r\nlists: {\r\n  projects: [...],\r\n  teams: [...]\r\n}\r\n```\r\n\r\nIdeally we would like to have this global data available for reference but also to reuse this data at the app level as local data. To enable this, each local `/data` folder has a `global.js` which exports all the global data which can then be referenced locally as follows.\r\n\r\n```js\r\nvar _ = require('./global');\r\nmodule.exports = {\r\n  // See global data, lists/projects\r\n  // out.global.lists.projects\r\n  page: {\r\n    name: 'projects',\r\n    title: 'Projects',\r\n    list: _.lists.projects;\r\n  }\r\n}\r\n```\r\n\r\nSo here we set up a local generic `list` to point to the global data `list.projects`. This can then be passed to whatever list generator which knows how to populate and render a given type of list. Magic!\r\n\r\nUsing this approach, any app which which displays a model or list using the same renderer, can be set up to inherit from a generic app which handles it.\r\n\r\n```js\r\nmodule.exports = {\r\n  type: 'list',\r\n  page: {\r\n    app: 'list'\r\n  }\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}