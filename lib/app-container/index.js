'use strict';
let extend = require('extend');
let path = require('path');
let projectConf = require('../config/project');

// new appContainer(opts)
module.exports = function(opts) {
  opts = opts || {debug: false};
  let Mounter = require('./mounter');
  let Routes = require('./routes');
  let Assets = require('./assets');

  let appContainer = {
    apps: {},
    opts: opts,
    rootPath: opts.rootPath,
    debug: opts.debug,
    log: function(msg, obj) {
      console.log(msg, obj);
      if (!opts.debug) return;
      obj ? this.logger(msg, obj) : this.logger(msg);
    },
    logger: opts.logger || console.log,
    state: {
      page: {}, // for any page
      $global: {} // should get via require(rootPath + '/apps/_global/state')
    },
    views: {
    },
    addViewsDir: function(name, config) {
      this.views[name] = config.views || path.join(config.rootPath, 'apps', name, 'page');
    },
    join: function(appContainer) {
      extend(apps, appContainer.apps);
      return this;
    },
    defaultKoaApp: function(opts) {
      let lassoFile;
      opts = opts || {};
      if (opts.lasso) {
        if (!opts.rootPath) {
          throw 'Missing rootPath for koa server configuration: lasso config'
        }
        let lassoConfFile = opts.lassoFile || './lasso-config.json';
        lassoFile = path.join(opts.rootPath, lassoConfFile);
      }
      let markoa = require('../')
      let serverOpts = {port: opts.port, lassoFile: lassoFile, debug: opts.debug};
      let Server = markoa.Server;
      let mwConf = opts.mw || 'minimal';
      return new Server(serverOpts).init(function(mws) {
        mws[mwConf]();
      });
    },
    // assume that unless koaApp has an app key, it is an options hash
    setKoaApp(koaApp) {
      if (this.koaApp) return;
      let opts = koaApp;
      if (typeof koaApp === 'object')
        koaApp = koaApp.app ? koaApp : undefined;
      koaApp = koaApp || this.defaultKoaApp(opts);
      this.koaApp = koaApp;
    },
    configureGlobal: function(koaApp) {
      this.setKoaApp(koaApp);
      koaApp = this.koaApp;
      let globalAssetsPath = projectConf.apps.global.assets.path;
      let globalWidgetsPath = projectConf.apps.global.components.widgets.path;

      let fullglobalAssetsPath = path.join(opts.rootPath, globalAssetsPath);
      let fullglobalWidgetsPath = path.join(opts.rootPath, globalWidgetsPath);

      let addStaticAssets = koaApp.config.mws.assets;
      addStaticAssets(this.koaApp.app, {dir: fullglobalAssetsPath});
      this.globalConfigured = true;
    },
    configureApps: function(koaApp) {
      this.setKoaApp(koaApp);
      this.routes = new Routes(this);
      this.assets = new Assets(this);

      for (let name of Object.keys(this.apps)) {
        let config = this.apps[name];
        this.routes.add(name, config);
        this.assets.add(name, config);
      }
      this.appsConfigured = true;
      return this;
    },
    // A koaApp is generated by calling koa() which creates a Koa server app instance
    start: function(koaApp) {
      this.setKoaApp(koaApp);
      if (!this.globalConfigured) this.configureGlobal(koaApp);
      if (!this.appsConfigured) this.configureApps(koaApp);
      this.koaApp.koaServer.start(this);
      return this;
    },
    Mounter: Mounter,
    Routes: Routes
  };
  appContainer.mount = new Mounter(appContainer);
  return appContainer;
}
